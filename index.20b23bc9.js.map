{"mappings":"IC0BI,EAIA,EACA,EACA,EACA,EA/BJ,MAAM,EAAe,SAAS,aAAA,CAAc,eACtC,EAAS,SAAS,aAAA,CAAc,WAChC,EAAc,SAAS,aAAA,CAAc,YACrC,EAAc,SAAS,aAAA,CAAc,iBACrC,EAA0B,UAC1B,EAAsB,UACtB,EAAiB,SAAS,aAAA,CAAc,aACxC,EAAoB,SAAS,aAAA,CAAc,gBAC3C,EAAiB,SAAS,aAAA,CAAc,aACxC,EAAuB,SAAS,aAAA,CAAc,mBAE9C,EAAmB,CACvB,EACA,EACA,EACA,EACD,CAGK,CAAC,EAAQ,EAAc,EAAW,EAAQ,EAAS,EAAY,EAAY,EAAU,EAAO,CAAG,CAAC,SAAU,gBAAiB,YAAa,UAAW,UAAW,cAAe,aAAc,YAAa,QAAQ,CAGhN,CAAC,EAAU,EAAa,EAAU,EAAe,CAAG,CAAC,WAAY,cAAe,WAAY,iBAAiB,CAGnH,IAAI,EAAsB,GACtB,EAAkC,EAClC,EAAwB,CAAA,CAFE,2DAA0D;AAQxF,MAAM,EAAmB,WACvB,IAAM,EAAoB,OAAO,UAAA,CAAa,OAAO,WAArD,AAEI,CAAA,EAAoB,EAAI,GAC1B,EAAa,KAAA,CAAM,MAAA,CAAS,MAC5B,EAAa,KAAA,CAAM,KAAA,CAAQ,KAE3B,EAAa,KAAA,CAAM,MAAA,CAAS,GAC5B,EAAa,KAAA,CAAM,KAAA,CAAQ,mBAE/B,EAEA,4FAA4F;AAC5F,OAAO,QAAA,CAAS,gBAAA,CAAiB,mBAAoB,GACrD,OAAO,gBAAA,CAAiB,SAAU,EAElC,uEAAsE;AACtE,MAAM,EAA4B,SAAU,CAAU,CAAE,CAAK,EAC3D,EAAsB,EAAa,CACrC,EAGM,EAAwC,WAC5C,GACF,EAEM,EAAe,SAAU,CAAK,EAClC,GAAI,AAAU,UAAV,EACF,EAAO,WAAA,CAAc,MAChB,CACL,IAAI,EAAc,OAAO,GACrB,EAAc,OAAO,GACnB,EAAa,KAAK,IAAA,CAAK,GAE7B,GAAI,EAAY,QAAA,CAAS,KAAM,CAC7B,GAAI,CAAC,EAAK,EAAM,CAAG,EAAY,KAAA,CAAM,KAC/B,EAAS,KAAK,GAAA,CAAI,OAAO,GAE3B,CAAA,OAAO,GAAQ,MAAA,EAAU,GAC3B,EAAO,WAAA,CAAc,CAAC,EACpB,AAAe,KAAf,GAAqB,AAAe,KAAf,EAAoB,IAAM,GAChD,EAAE,EAAO,CAAC,EAAE,EAAM,CAAC,CAEpB,EAAO,WAAA,CAAc,CAAC,EACpB,AAAe,KAAf,GAAqB,AAAe,KAAf,EAAoB,IAAM,GAChD,EAAE,EAAO,OAAA,CAAQ,GAAG,CAAC,EAAE,EAAM,CAAC,AAEnC,MACE,GACE,EAAa,QAAA,CAAS,MACpB,EAAY,QAAA,CAAS,MACrB,EAAY,MAAA,EAAU,IACvB,EAAY,QAAA,CAAS,MACpB,CAAC,EAAY,QAAA,CAAS,MACtB,EAAY,MAAA,EAAU,IACvB,CAAC,EAAY,QAAA,CAAS,MACrB,EAAY,QAAA,CAAS,MACrB,EAAY,MAAA,EAAU,IACvB,CAAC,EAAY,QAAA,CAAS,MACrB,CAAC,EAAY,QAAA,CAAS,MACtB,EAAY,MAAA,EAAU,EAExB,EAAO,WAAA,CAAc,MAChB,CACL,IAAI,EAAS,KAAK,GAAA,CAAI,GAClB,EAAI,EACR,KAAO,GAAU,IACf,GAAkB,GAClB,GAGE,CAAA,OAAO,GAAQ,MAAA,EAAU,GAC3B,EAAO,WAAA,CAAc,CAAC,EACpB,AAAe,KAAf,GAAqB,AAAe,KAAf,EAAoB,IAAM,GAChD,EAAE,EAAO,EAAE,EAAE,EAAE,CAAC,CAEjB,EAAO,WAAA,CAAc,CAAC,EACpB,AAAe,KAAf,GAAqB,AAAe,KAAf,EAAoB,IAAM,GAChD,EAAE,EAAO,OAAA,CAAQ,GAAG,EAAE,EAAE,EAAE,CAAC,AAEhC,CAEJ,CACF,EAGM,EAAgB,SAAU,CAAU,CAAE,CAAK,EAC/C,EAA0B,EAAY,GACtC,GACF,EAEM,EAA2B,SAAU,CAAU,EAC/C,IAAe,IACjB,GAAsB,OAAO,GAC7B,EAAwB,OAAO,GAC/B,EAAkC,EAClC,EAAwB,CAAA,GAGtB,IAAe,IACjB,GAAsB,OAAO,GAC7B,EAAwB,OAAO,GAC/B,EAAkC,EAClC,EAAwB,CAAA,GAGtB,IAAe,IACjB,GAA0C,OAAO,GACjD,EAAwB,OAAO,GAC/B,EAAkC,EAClC,EAAwB,CAAA,GAGtB,IAAe,IACjB,GAA0C,OAAO,GACjD,EAAwB,OAAO,GAC/B,EAAkC,EAClC,EAAwB,CAAA,GAIQ,IAAuB,IACvD,EAAa,SAEb,EAAa,EAEjB,EAEM,EAAyC,SAAU,CAAU,EAC7D,IAAe,GACjB,CAAA,EAAqB,OAAO,GAAuB,CADrD,EAII,IAAe,GACjB,CAAA,EAAqB,OAAO,GAAuB,CADrD,EAII,IAAe,GACjB,CAAA,EAAqB,OAAO,GAAuB,CADrD,EAII,IAAe,GACjB,CAAA,EAAqB,OAAO,GAAuB,CADrD,EAKkC,IAAuB,IACvD,EAAa,SAEb,EAAa,EAEjB,EAEM,EAAmC,SAAU,CAAU,EACvD,IAAe,GACjB,CAAA,GAA0C,CAD5C,EAII,IAAe,GACjB,CAAA,GAA0C,CAD5C,EAII,IAAe,GACjB,CAAA,GAA0C,CAD5C,EAII,IAAe,GACjB,CAAA,GAA0C,CAD5C,EAKkC,IAAuB,IACvD,EAAa,SAEb,EAAa,EAEjB,EAysBA,EAAY,gBAAA,CAAiB,QAvsBV,SAAU,CAAC,EAG5B,wCAAwC;AACxC,GAAI,AAHJ,CAAA,EAAgB,EAAE,MAAA,AAAA,EAGA,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAO,CAAC,GAQ9C,gGAAgG;AAChG,GARA,EAAY,WAAA,CAAc,IAE1B,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GAIE,AAA0B,KAAA,IAA1B,GACA,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,EAE1B,EAA0B,GAAI,EAAc,OAAA,CAAQ,MAApD,EACA,EAAa,GAEwB,MAAjC,EAAc,OAAA,CAAQ,MAAA,EACxB,IAGF,EAAwB,OAGrB,GAAI,IAA0B,GACjC,6DAA6D;AAC7D,GACE,AAAiC,MAAjC,EAAc,OAAA,CAAQ,MAAA,EACtB,AAA+B,IAA/B,EAAoB,MAAA,EACpB,EAAoB,QAAA,CAAS,KAE7B,EAAwB,EACxB,EAAa,QAGV,GACH,AAA+B,IAA/B,EAAoB,MAAA,EACpB,EAAoB,QAAA,CAAS,MAC7B,AAAiC,MAAjC,EAAc,OAAA,CAAQ,MAAA,CAEtB,EAAc,GAAI,EAAc,OAAA,CAAQ,MAAxC,EACA,EAAa,GAEb,EAAwB,OAGrB,GACH,AAA+B,IAA/B,EAAoB,MAAA,EACnB,EAAoB,QAAA,CAAS,MAQ3B,IAAI,CAAA,EAAkC,CAAA,EAMzC,OALA,EAAc,EAAqB,EAAc,OAAA,CAAQ,MAAzD,EACA,EAAa,GAEb,EAAwB,OAVxB,EAAc,EAAqB,EAAc,OAAA,CAAQ,MAAzD,EACA,EAAa,GAEb,EAAwB,OAavB,GAAI,IAA0B,EAAc,CAC/C,IAAI,CAAA,EAAkC,CAAA,EAMpC,OALA,EAAc,EAAqB,EAAc,OAAA,CAAQ,MAAzD,EACA,EAAa,GAEb,EAAwB,CAI5B,MAEK,GAAI,IAA0B,GACjC,GACE,AAAgC,IAAhC,OAAO,IACP,AAAiC,MAAjC,EAAc,OAAA,CAAQ,MAAA,CAEtB,EAA0B,IAAK,EAAc,OAAA,CAAQ,MAArD,EACA,EAAa,GACb,EAAwB,EACxB,EAAkC,OAC7B,IAAI,CAAA,EAAkC,CAAA,EAS3C,OARA,EACE,EACA,EAAc,OAAA,CAAQ,MAFxB,EAIA,IACA,EAAwB,EACxB,EAAa,KAOnB,yCAAyC;AACzC,GAAI,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAa,CAAC,EAAG,CAQvD,GAPA,EAAY,WAAA,CAAc,IAE1B,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GAEK,EAiCH,MA/BE,AAA0B,MAAA,IAA1B,GACA,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAE1B,EAA0B,IAAK,KAC/B,EAAkC,EAClC,EAAwB,EACxB,EAAwB,CAAA,EACxB,EAAa,IAEb,IAA0B,GAC1B,EAAkC,GAElC,EAA0B,EAAqB,KACX,IAAhC,OAAO,IACT,IAEF,EAAwB,EACxB,EAAwB,CAAA,EACxB,EAAa,IACJ,IAA0B,IACnC,EAA0B,EAAqB,KAC/C,EAAwB,EACxB,EAAwB,CAAA,EACxB,EAAa,GAKnB,CAweA,oCAAoC;AACpC,GApeI,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAS,CAAC,IAChD,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GACA,EAAe,KAAA,CAAM,eAAA,CAAkB,EACvC,EAAe,KAAA,CAAM,WAAA,CAAc,EAIjC,AAA0B,KAAA,IAA1B,GACA,IAA0B,GAE1B,EAAqB,EACrB,EAAwB,EACxB,EAAsB,GACtB,EAAkC,EAClC,EAAwB,EACxB,EAAwB,CAAA,EACxB,EAAoB,EACpB,EAAa,IAIb,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,EAErB,GAUH,EAAyB,GACzB,EAAwB,EACxB,EAAoB,IAXpB,EAAqB,OAAO,GAC5B,EAAwB,OAAO,GAC/B,EAAwB,CAAA,EACxB,EAAsB,GACtB,EAAkC,EAClC,EAAoB,EACpB,EAAwB,EACxB,EAAa,IASf,CAAA,IAA0B,GAC1B,IAA0B,CAAA,GAE1B,CAAA,EAAoB,CAJjB,GASH,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAY,CAAC,IACnD,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GACA,EAAkB,KAAA,CAAM,eAAA,CAAkB,EAC1C,EAAkB,KAAA,CAAM,WAAA,CAAc,EAIpC,AAA0B,KAAA,IAA1B,GACA,IAA0B,GAE1B,EAAqB,EACrB,EAAwB,EACxB,EAAsB,GACtB,EAAkC,EAClC,EAAwB,EACxB,EAAwB,CAAA,EACxB,EAAoB,EACpB,EAAa,IAIb,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,EAErB,GAUH,EAAyB,GACzB,EAAwB,EACxB,EAAoB,IAXpB,EAAqB,OAAO,GAC5B,EAAwB,OAAO,GAC/B,EAAwB,CAAA,EACxB,EAAsB,GACtB,EAAkC,EAClC,EAAoB,EACpB,EAAwB,EACxB,EAAa,IASf,CAAA,IAA0B,GAC1B,IAA0B,CAAA,GAE1B,CAAA,EAAoB,CAJjB,GASH,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAS,CAAC,IAChD,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GACA,EAAe,KAAA,CAAM,eAAA,CAAkB,EACvC,EAAe,KAAA,CAAM,WAAA,CAAc,EAIjC,AAA0B,KAAA,IAA1B,GACA,IAA0B,GAE1B,EAAqB,EACrB,EAAwB,EACxB,EAAsB,GACtB,EAAkC,EAClC,EAAwB,EACxB,EAAwB,CAAA,EACxB,EAAoB,EACpB,EAAa,IAIb,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,EAErB,GAUH,EAAyB,GACzB,EAAwB,EACxB,EAAoB,IAXpB,EAAqB,OAAO,GAC5B,EAAwB,OAAO,GAC/B,EAAwB,CAAA,EACxB,EAAsB,GACtB,EAAkC,EAClC,EAAoB,EACpB,EAAwB,EACxB,EAAa,IASf,CAAA,IAA0B,GAC1B,IAA0B,CAAA,GAE1B,CAAA,EAAoB,CAJjB,GASH,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAe,CAAC,IACtD,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GACA,EAAqB,KAAA,CAAM,eAAA,CAAkB,EAC7C,EAAqB,KAAA,CAAM,WAAA,CAAc,EAIvC,AAA0B,KAAA,IAA1B,GACA,IAA0B,GAE1B,EAAqB,EACrB,EAAwB,EACxB,EAAsB,GACtB,EAAkC,EAClC,EAAwB,EACxB,EAAwB,CAAA,EACxB,EAAoB,EACpB,EAAa,IAIb,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,EAErB,GAUH,EAAyB,GACzB,EAAwB,EACxB,EAAoB,IAXpB,EAAqB,OAAO,GAC5B,EAAwB,OAAO,GAC/B,EAAwB,CAAA,EACxB,EAAsB,GACtB,EAAkC,EAClC,EAAoB,EACpB,EAAwB,EACxB,EAAa,IASf,CAAA,IAA0B,GAC1B,IAA0B,CAAA,GAE1B,CAAA,EAAoB,CAJjB,GAWH,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAO,CAAC,IAC9C,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GAGE,AAA0B,KAAA,IAA1B,GACA,IAA0B,GAC1B,IAA0B,GAE1B,EAA0B,IAAK,KAC/B,EAAwB,EACxB,EAAa,IACJ,IAA0B,GACnC,EAA0B,OAAO,GAAK,OAAO,IAAuB,KACpE,EAAwB,EACxB,EAAa,IACJ,IAA0B,GACnC,EAA0B,IAAK,KAC/B,EAAwB,EACxB,EAAa,IAEb,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAE1B,EAAsB,OAAO,GAAK,OAAO,IACzC,EAAwB,EACxB,EAAa,IACJ,IAA0B,GAC/B,AAAwD,MAAxD,CAAmB,CAAC,EAAoB,MAAA,CAAS,EAAE,CACrD,EACE,OAAO,GAAK,OAAO,IACnB,KAKF,EAA0B,OAAO,GAAK,OAAO,IAAuB,IACpE,EAAa,GACb,EAAwB,GAEjB,IAA0B,IACnC,EAA0B,OAAO,GAAK,OAAO,IAAsB,IACnE,EAAa,GACb,EAAwB,IAKxB,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAQ,CAAC,IAC3C,AAA0B,KAAA,IAA1B,GACF,EAAqB,EACrB,EAAwB,EACxB,EAAa,SACb,EAAwB,EACxB,EAAsB,KACb,IAA0B,EAC/B,AAAuB,IAAvB,GACF,EAAa,SACb,EAAwB,EACxB,EAAsB,MAItB,EADA,EAAsB,OAAO,EAAI,IAEjC,EAAwB,GAG1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,EAEtB,AAAgC,IAAhC,OAAO,IACT,EAAa,SACb,EAAwB,EACxB,EAAsB,MAItB,EADA,EAAsB,OAAO,EAAI,OAAO,KAExC,EAAwB,GAEjB,IAA0B,GACnC,EAAsB,OAAO,EAAI,OAAO,IACxC,EAAwB,GACf,IAA0B,IACnC,EAAsB,IACtB,EAAa,SACb,EAAwB,GAE1B,EAAwB,CAAA,GAItB,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAW,CAAC,IAEhD,AAA0B,KAAA,IAA1B,GACA,IAA0B,GAG1B,EADA,EAAsB,KAEtB,EAAwB,GAExB,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,EAEtB,AAA8B,EAA9B,OAAO,IACT,EAAwB,OAAO,GAC/B,EAAa,SACb,EAAwB,EACxB,EAAsB,MAGtB,EADA,EAAsB,OAAO,KAAK,IAAA,CAAK,OAAO,MAE9C,EAAwB,GAEjB,IAA0B,EAC/B,EAAqB,GACvB,EAAa,SACb,EAAwB,EACxB,EAAsB,IACtB,EAAwB,IAGxB,EADA,EAAsB,OAAO,EAAI,IAEjC,EAAwB,GAEjB,IAA0B,IAEnC,EADA,EAAsB,OAAO,KAAK,IAAA,CAAK,OAAO,MAE9C,EAAwB,GAE1B,EAAwB,CAAA,GAItB,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAW,CAAC,IAEhD,AAA0B,KAAA,IAA1B,GACA,IAA0B,GAG1B,EADA,EAAsB,KAEtB,EAAwB,GAExB,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAG1B,EADA,EAAsB,OAAO,OAAO,GAAuB,MAE3D,EAAwB,GACf,IAA0B,EACD,IAAuB,KACvD,EAAa,SACb,EAAsB,IACtB,EAAwB,IAExB,EAAsB,OAAO,OAAO,GAAsB,KAC1D,EAAwB,EACxB,EAAa,IAGf,IAA0B,GAC1B,IAA0B,GAEU,IAAhC,OAAO,IAIT,CAAA,EAAsB,OAAO,OAAO,GAAsB,IAA1D,EAHA,EAAwB,EACxB,EAAa,IAMN,IAA0B,EACD,IAAuB,KACvD,EAAa,SACb,EAAwB,EACxB,EAAsB,MAGtB,EADA,EAAsB,OAAO,OAAO,GAAsB,MAE1D,EAAwB,GAEjB,IAA0B,IACnC,EAAsB,OAAO,OAAO,GAAsB,KAC1D,EAAwB,EACxB,EAAa,IAEf,EAAwB,CAAA,GAItB,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAS,CAAC,IAChD,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GAEI,AAA0B,KAAA,IAA1B,GACF,EAAqB,EACrB,EAAwB,EACxB,EAAwB,GAExB,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAErB,EAMH,EAAyB,IALzB,EAAqB,OAAO,GAC5B,EAAwB,OAAO,GAC/B,EAAa,IACb,EAAwB,GAKjB,IAA0B,GACnC,EAAwB,EACxB,EAAiC,GACjC,EAAwB,GACf,IAA0B,GAC/B,EACF,EAAuC,GAIvC,EADA,EAAqB,OAAO,IAE5B,EAAwB,GAEjB,IAA0B,GAC/B,EACF,EAAiC,GAGjC,EAAa,GACb,EAAwB,GAEjB,IAA0B,IACnC,EAAwB,EACxB,EAAa,GACb,EAAwB,GAE1B,EAAwB,CAAA,GAItB,EAAc,SAAA,CAAU,QAAA,CAAS,CAAC,EAAE,EAAM,CAAC,EAAG,CAChD,GAAI,AAA0B,KAAA,IAA1B,EACF,MAEA,CAAA,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAE1B,EAAY,WAAA,CAAc,KAE1B,EAAsB,GACtB,EAAa,KAEX,GACC,CAAA,IAA0B,GACzB,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,GAC1B,IAA0B,CAAA,IAE5B,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GAEA,SAAS,aAAA,CAAc,CAAC,CAAC,EAAE,EAAkB,CAAC,EAAE,KAAA,CAAM,eAAA,CACpD,EACF,SAAS,aAAA,CAAc,CAAC,CAAC,EAAE,EAAkB,CAAC,EAAE,KAAA,CAAM,WAAA,CACpD,GAGA,IAA0B,IAC5B,SAAS,aAAA,CAAc,YAAY,KAAA,CAAM,eAAA,CACvC,EACF,SAAS,aAAA,CAAc,YAAY,KAAA,CAAM,WAAA,CACvC,GAGuB,KAAA,IAAvB,GACF,CAAA,EAAqB,CAAA,EAGvB,EAAwB,CAAA,EACxB,EAAwB,GACf,IAA0B,IACnC,EAAwB,KAAA,EACxB,EAAsB,GACtB,EAAsB,EACtB,EAAqB,KAAA,EACrB,EAAwB,KAAA,EACxB,EAAwB,CAAA,EACxB,EAAoB,KAAA,EAEpB,EAAiB,OAAA,CAAQ,AAAC,IACxB,EAAI,KAAA,CAAM,eAAA,CAAkB,KAC5B,EAAI,KAAA,CAAM,WAAA,CAAc,IAC1B,GAEA,SAAS,aAAA,CAAc,YAAY,KAAA,CAAM,eAAA,CAAkB,KAC3D,SAAS,aAAA,CAAc,YAAY,KAAA,CAAM,WAAA,CAAc,KAE3D,CACF,E,4D","sources":["<anon>","script.js"],"sourcesContent":["var $c1ce9d969bfa6909$exports = {};\n\"use strict\";\nconst $c1ce9d969bfa6909$var$calculatorEl = document.querySelector(\".calculator\");\nconst $c1ce9d969bfa6909$var$screen = document.querySelector(\".screen\");\nconst $c1ce9d969bfa6909$var$buttonsArea = document.querySelector(\".buttons\");\nconst $c1ce9d969bfa6909$var$buttonClear = document.querySelector(\".button-clear\");\nconst $c1ce9d969bfa6909$var$selectedBackgroundColor = \"#fee48f\";\nconst $c1ce9d969bfa6909$var$selectedBorderColor = \"#b18907\";\nconst $c1ce9d969bfa6909$var$additionButton = document.querySelector(\".addition\");\nconst $c1ce9d969bfa6909$var$subtractionButton = document.querySelector(\".subtraction\");\nconst $c1ce9d969bfa6909$var$divisionButton = document.querySelector(\".division\");\nconst $c1ce9d969bfa6909$var$multiplicationButton = document.querySelector(\".multiplication\");\nconst $c1ce9d969bfa6909$var$operationButtons = [\n    $c1ce9d969bfa6909$var$additionButton,\n    $c1ce9d969bfa6909$var$subtractionButton,\n    $c1ce9d969bfa6909$var$divisionButton,\n    $c1ce9d969bfa6909$var$multiplicationButton\n];\n// prettier-ignore\nconst [$c1ce9d969bfa6909$var$number, $c1ce9d969bfa6909$var$decimalPoint, $c1ce9d969bfa6909$var$operation, $c1ce9d969bfa6909$var$posNeg, $c1ce9d969bfa6909$var$inverse, $c1ce9d969bfa6909$var$squareRoot, $c1ce9d969bfa6909$var$percentage, $c1ce9d969bfa6909$var$equalsTo, $c1ce9d969bfa6909$var$clear] = [\n    \"number\",\n    \"decimal-point\",\n    \"operation\",\n    \"pos-neg\",\n    \"inverse\",\n    \"square-root\",\n    \"percentage\",\n    \"equals-to\",\n    \"clear\"\n];\n// prettier-ignore\nconst [$c1ce9d969bfa6909$var$addition, $c1ce9d969bfa6909$var$subtraction, $c1ce9d969bfa6909$var$division, $c1ce9d969bfa6909$var$multiplication] = [\n    \"addition\",\n    \"subtraction\",\n    \"division\",\n    \"multiplication\"\n];\nlet $c1ce9d969bfa6909$var$pressedButton;\nlet $c1ce9d969bfa6909$var$workingNumberString = \"\"; // To be updated when the user is done entering the number\nlet $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0; // To make sure that the entered number has no greater than 9 digits in total\nlet $c1ce9d969bfa6909$var$decimalPointActivated = false; // To be updated when decimal point has been input\nlet $c1ce9d969bfa6909$var$savedWorkingNumber; // Number to be updated as one of the 4 main operations is pressed\nlet $c1ce9d969bfa6909$var$previousEnteredNumber; // Last number to be entered\nlet $c1ce9d969bfa6909$var$previousButtonPressed; // Last button to be pressed, either operation or number\nlet $c1ce9d969bfa6909$var$operationInMemory; // Last operation button pressed, either addition, subtraction, division or multiplication\nconst $c1ce9d969bfa6909$var$resizeCalculator = function() {\n    const windowAspectRatio = window.innerWidth / window.innerHeight;\n    if (windowAspectRatio > 5 / 6) {\n        $c1ce9d969bfa6909$var$calculatorEl.style.height = \"95%\";\n        $c1ce9d969bfa6909$var$calculatorEl.style.width = \"\";\n    } else {\n        $c1ce9d969bfa6909$var$calculatorEl.style.height = \"\";\n        $c1ce9d969bfa6909$var$calculatorEl.style.width = \"min(100%, 50rem)\";\n    }\n};\n// Event listener to check for width of calculator when DOM loads and when window is resized\nwindow.document.addEventListener(\"DOMContentLoaded\", $c1ce9d969bfa6909$var$resizeCalculator);\nwindow.addEventListener(\"resize\", $c1ce9d969bfa6909$var$resizeCalculator);\n// Function to update working number string by adding characters to it\nconst $c1ce9d969bfa6909$var$updateWorkingNumberString = function(rootString, adder) {\n    $c1ce9d969bfa6909$var$workingNumberString = rootString + adder;\n};\n// Function to update the number string digit counter\nconst $c1ce9d969bfa6909$var$updateWorkingNumberStringDigitCounter = function() {\n    $c1ce9d969bfa6909$var$workingNumberStringDigitCounter++;\n};\nconst $c1ce9d969bfa6909$var$renderScreen = function(value) {\n    if (value === \"Error\") $c1ce9d969bfa6909$var$screen.textContent = value;\n    else {\n        let valueNumber = Number(value);\n        let valueString = String(value);\n        const numberSign = Math.sign(valueNumber);\n        if (valueString.includes(\"e\")) {\n            let [num, ePart] = valueString.split(\"e\");\n            const numAbs = Math.abs(Number(num));\n            if (String(numAbs).length <= 10) $c1ce9d969bfa6909$var$screen.textContent = `${numberSign === -1 || numberSign === -0 ? \"-\" : \"\"}${numAbs}e${ePart}`;\n            else $c1ce9d969bfa6909$var$screen.textContent = `${numberSign === -1 || numberSign === -0 ? \"-\" : \"\"}${numAbs.toFixed(8)}e${ePart}`;\n        } else if (valueString.includes(\"-\") && valueString.includes(\".\") && valueString.length <= 11 || valueString.includes(\"-\") && !valueString.includes(\".\") && valueString.length <= 10 || !valueString.includes(\"-\") && valueString.includes(\".\") && valueString.length <= 10 || !valueString.includes(\"-\") && !valueString.includes(\".\") && valueString.length <= 9) $c1ce9d969bfa6909$var$screen.textContent = valueString;\n        else {\n            let numAbs = Math.abs(valueNumber);\n            let i = 0;\n            while(numAbs >= 10){\n                numAbs = numAbs / 10;\n                i++;\n            }\n            if (String(numAbs).length <= 10) $c1ce9d969bfa6909$var$screen.textContent = `${numberSign === -1 || numberSign === -0 ? \"-\" : \"\"}${numAbs}e+${i}`;\n            else $c1ce9d969bfa6909$var$screen.textContent = `${numberSign === -1 || numberSign === -0 ? \"-\" : \"\"}${numAbs.toFixed(8)}e+${i}`;\n        }\n    }\n};\n// Function combining updateWorkingNumberString and updateWorkingNumberStringDigitCounter\nconst $c1ce9d969bfa6909$var$numberPressed = function(rootString, adder) {\n    $c1ce9d969bfa6909$var$updateWorkingNumberString(rootString, adder);\n    $c1ce9d969bfa6909$var$updateWorkingNumberStringDigitCounter();\n};\nconst $c1ce9d969bfa6909$var$performOperationInMemory = function(opInMemory) {\n    if (opInMemory === $c1ce9d969bfa6909$var$addition) {\n        $c1ce9d969bfa6909$var$savedWorkingNumber += Number($c1ce9d969bfa6909$var$workingNumberString);\n        $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n        $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n        $c1ce9d969bfa6909$var$decimalPointActivated = false;\n    }\n    if (opInMemory === $c1ce9d969bfa6909$var$subtraction) {\n        $c1ce9d969bfa6909$var$savedWorkingNumber -= Number($c1ce9d969bfa6909$var$workingNumberString);\n        $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n        $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n        $c1ce9d969bfa6909$var$decimalPointActivated = false;\n    }\n    if (opInMemory === $c1ce9d969bfa6909$var$division) {\n        $c1ce9d969bfa6909$var$savedWorkingNumber = $c1ce9d969bfa6909$var$savedWorkingNumber / Number($c1ce9d969bfa6909$var$workingNumberString);\n        $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n        $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n        $c1ce9d969bfa6909$var$decimalPointActivated = false;\n    }\n    if (opInMemory === $c1ce9d969bfa6909$var$multiplication) {\n        $c1ce9d969bfa6909$var$savedWorkingNumber = $c1ce9d969bfa6909$var$savedWorkingNumber * Number($c1ce9d969bfa6909$var$workingNumberString);\n        $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n        $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n        $c1ce9d969bfa6909$var$decimalPointActivated = false;\n    }\n    // Check if multiplying by Infinity or NaN\n    if ($c1ce9d969bfa6909$var$savedWorkingNumber === Infinity) $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n    else $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n};\nconst $c1ce9d969bfa6909$var$performOperationInMemoryPosNegEqualsTo = function(opInMemory) {\n    if (opInMemory === $c1ce9d969bfa6909$var$addition) $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString) + $c1ce9d969bfa6909$var$previousEnteredNumber;\n    if (opInMemory === $c1ce9d969bfa6909$var$subtraction) $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString) - $c1ce9d969bfa6909$var$previousEnteredNumber;\n    if (opInMemory === $c1ce9d969bfa6909$var$division) $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString) / $c1ce9d969bfa6909$var$previousEnteredNumber;\n    if (opInMemory === $c1ce9d969bfa6909$var$multiplication) $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString) * $c1ce9d969bfa6909$var$previousEnteredNumber;\n    // Check if multiplying by Infinity or NaN\n    if ($c1ce9d969bfa6909$var$savedWorkingNumber === Infinity) $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n    else $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n};\nconst $c1ce9d969bfa6909$var$performOperationInMemoryEqualsTo = function(opInMemory) {\n    if (opInMemory === $c1ce9d969bfa6909$var$addition) $c1ce9d969bfa6909$var$savedWorkingNumber = $c1ce9d969bfa6909$var$savedWorkingNumber + $c1ce9d969bfa6909$var$previousEnteredNumber;\n    if (opInMemory === $c1ce9d969bfa6909$var$subtraction) $c1ce9d969bfa6909$var$savedWorkingNumber = $c1ce9d969bfa6909$var$savedWorkingNumber - $c1ce9d969bfa6909$var$previousEnteredNumber;\n    if (opInMemory === $c1ce9d969bfa6909$var$division) $c1ce9d969bfa6909$var$savedWorkingNumber = $c1ce9d969bfa6909$var$savedWorkingNumber / $c1ce9d969bfa6909$var$previousEnteredNumber;\n    if (opInMemory === $c1ce9d969bfa6909$var$multiplication) $c1ce9d969bfa6909$var$savedWorkingNumber = $c1ce9d969bfa6909$var$savedWorkingNumber * $c1ce9d969bfa6909$var$previousEnteredNumber;\n    // Check if multiplying by Infinity or NaN\n    if ($c1ce9d969bfa6909$var$savedWorkingNumber === Infinity) $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n    else $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n};\nconst $c1ce9d969bfa6909$var$calculator = function(e) {\n    $c1ce9d969bfa6909$var$pressedButton = e.target; // Registering the pressed button\n    // If current pressed button is a number\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$number}`)) {\n        $c1ce9d969bfa6909$var$buttonClear.textContent = \"C\";\n        $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n            opr.style.backgroundColor = null;\n            opr.style.borderColor = null;\n        });\n        // If no previous button has been pressed or the previous button pressed was an operation button\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$updateWorkingNumberString(\"\", $c1ce9d969bfa6909$var$pressedButton.dataset.number);\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            if ($c1ce9d969bfa6909$var$pressedButton.dataset.number !== \"0\") $c1ce9d969bfa6909$var$updateWorkingNumberStringDigitCounter();\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$number;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number) {\n            // If working number string is just 0 and pressed number is 0\n            if ($c1ce9d969bfa6909$var$pressedButton.dataset.number === \"0\" && $c1ce9d969bfa6909$var$workingNumberString.length === 1 && $c1ce9d969bfa6909$var$workingNumberString.includes(\"0\")) {\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$number;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            } else if ($c1ce9d969bfa6909$var$workingNumberString.length === 1 && $c1ce9d969bfa6909$var$workingNumberString.includes(\"0\") && $c1ce9d969bfa6909$var$pressedButton.dataset.number !== \"0\") {\n                $c1ce9d969bfa6909$var$numberPressed(\"\", $c1ce9d969bfa6909$var$pressedButton.dataset.number);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$number;\n            } else if ($c1ce9d969bfa6909$var$workingNumberString.length === 1 && !$c1ce9d969bfa6909$var$workingNumberString.includes(\"0\")) {\n                $c1ce9d969bfa6909$var$numberPressed($c1ce9d969bfa6909$var$workingNumberString, $c1ce9d969bfa6909$var$pressedButton.dataset.number);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$number;\n            } else if ($c1ce9d969bfa6909$var$workingNumberStringDigitCounter < 9) {\n                $c1ce9d969bfa6909$var$numberPressed($c1ce9d969bfa6909$var$workingNumberString, $c1ce9d969bfa6909$var$pressedButton.dataset.number);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$number;\n            } else return;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint) {\n            if ($c1ce9d969bfa6909$var$workingNumberStringDigitCounter < 9) {\n                $c1ce9d969bfa6909$var$numberPressed($c1ce9d969bfa6909$var$workingNumberString, $c1ce9d969bfa6909$var$pressedButton.dataset.number);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$number;\n            } else return;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg) {\n            if (Number($c1ce9d969bfa6909$var$workingNumberString) === 0 && $c1ce9d969bfa6909$var$pressedButton.dataset.number !== \"0\") {\n                $c1ce9d969bfa6909$var$updateWorkingNumberString(\"-\", $c1ce9d969bfa6909$var$pressedButton.dataset.number);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$number;\n                $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 1;\n            } else if ($c1ce9d969bfa6909$var$workingNumberStringDigitCounter < 9) {\n                $c1ce9d969bfa6909$var$updateWorkingNumberString($c1ce9d969bfa6909$var$workingNumberString, $c1ce9d969bfa6909$var$pressedButton.dataset.number);\n                $c1ce9d969bfa6909$var$workingNumberStringDigitCounter++;\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$number;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            } else return;\n        }\n    }\n    // If pressed button is the decimal point\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$decimalPoint}`)) {\n        $c1ce9d969bfa6909$var$buttonClear.textContent = \"C\";\n        $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n            opr.style.backgroundColor = null;\n            opr.style.borderColor = null;\n        });\n        if (!$c1ce9d969bfa6909$var$decimalPointActivated) {\n            if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n                $c1ce9d969bfa6909$var$updateWorkingNumberString(\"0\", \".\");\n                $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 1;\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$decimalPoint;\n                $c1ce9d969bfa6909$var$decimalPointActivated = true;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number && $c1ce9d969bfa6909$var$workingNumberStringDigitCounter < 9) {\n                $c1ce9d969bfa6909$var$updateWorkingNumberString($c1ce9d969bfa6909$var$workingNumberString, \".\");\n                if (Number($c1ce9d969bfa6909$var$workingNumberString) === 0) $c1ce9d969bfa6909$var$updateWorkingNumberStringDigitCounter();\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$decimalPoint;\n                $c1ce9d969bfa6909$var$decimalPointActivated = true;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg) {\n                $c1ce9d969bfa6909$var$updateWorkingNumberString($c1ce9d969bfa6909$var$workingNumberString, \".\");\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$decimalPoint;\n                $c1ce9d969bfa6909$var$decimalPointActivated = true;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            }\n        } else return;\n    }\n    /////////////////////////////// Operations Starts /////////////////////////////////\n    // If pressed button is addition button\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$addition}`)) {\n        $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n            opr.style.backgroundColor = null;\n            opr.style.borderColor = null;\n        });\n        $c1ce9d969bfa6909$var$additionButton.style.backgroundColor = $c1ce9d969bfa6909$var$selectedBackgroundColor;\n        $c1ce9d969bfa6909$var$additionButton.style.borderColor = $c1ce9d969bfa6909$var$selectedBorderColor;\n        // If no button had been pressed previously\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$savedWorkingNumber = 0;\n            $c1ce9d969bfa6909$var$previousEnteredNumber = 0;\n            $c1ce9d969bfa6909$var$workingNumberString = \"\";\n            $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n            $c1ce9d969bfa6909$var$decimalPointActivated = false;\n            $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$addition;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage) {\n            if (!$c1ce9d969bfa6909$var$operationInMemory) {\n                $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$decimalPointActivated = false;\n                $c1ce9d969bfa6909$var$workingNumberString = \"\";\n                $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n                $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$addition;\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n            } else {\n                $c1ce9d969bfa6909$var$performOperationInMemory($c1ce9d969bfa6909$var$operationInMemory);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n                $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$addition;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$addition;\n    }\n    // If pressed button is subtraction button\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$subtraction}`)) {\n        $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n            opr.style.backgroundColor = null;\n            opr.style.borderColor = null;\n        });\n        $c1ce9d969bfa6909$var$subtractionButton.style.backgroundColor = $c1ce9d969bfa6909$var$selectedBackgroundColor;\n        $c1ce9d969bfa6909$var$subtractionButton.style.borderColor = $c1ce9d969bfa6909$var$selectedBorderColor;\n        // If no button had been pressed previously\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$savedWorkingNumber = 0;\n            $c1ce9d969bfa6909$var$previousEnteredNumber = 0;\n            $c1ce9d969bfa6909$var$workingNumberString = \"\";\n            $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n            $c1ce9d969bfa6909$var$decimalPointActivated = false;\n            $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$subtraction;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage) {\n            if (!$c1ce9d969bfa6909$var$operationInMemory) {\n                $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$decimalPointActivated = false;\n                $c1ce9d969bfa6909$var$workingNumberString = \"\";\n                $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n                $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$subtraction;\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n            } else {\n                $c1ce9d969bfa6909$var$performOperationInMemory($c1ce9d969bfa6909$var$operationInMemory);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n                $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$subtraction;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$subtraction;\n    }\n    // If pressed button is division button\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$division}`)) {\n        $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n            opr.style.backgroundColor = null;\n            opr.style.borderColor = null;\n        });\n        $c1ce9d969bfa6909$var$divisionButton.style.backgroundColor = $c1ce9d969bfa6909$var$selectedBackgroundColor;\n        $c1ce9d969bfa6909$var$divisionButton.style.borderColor = $c1ce9d969bfa6909$var$selectedBorderColor;\n        // If no button had been pressed previously\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$savedWorkingNumber = 0;\n            $c1ce9d969bfa6909$var$previousEnteredNumber = 0;\n            $c1ce9d969bfa6909$var$workingNumberString = \"\";\n            $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n            $c1ce9d969bfa6909$var$decimalPointActivated = false;\n            $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$division;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage) {\n            if (!$c1ce9d969bfa6909$var$operationInMemory) {\n                $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$decimalPointActivated = false;\n                $c1ce9d969bfa6909$var$workingNumberString = \"\";\n                $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n                $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$division;\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n            } else {\n                $c1ce9d969bfa6909$var$performOperationInMemory($c1ce9d969bfa6909$var$operationInMemory);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n                $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$division;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$division;\n    }\n    // If pressed button is multiplication button\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$multiplication}`)) {\n        $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n            opr.style.backgroundColor = null;\n            opr.style.borderColor = null;\n        });\n        $c1ce9d969bfa6909$var$multiplicationButton.style.backgroundColor = $c1ce9d969bfa6909$var$selectedBackgroundColor;\n        $c1ce9d969bfa6909$var$multiplicationButton.style.borderColor = $c1ce9d969bfa6909$var$selectedBorderColor;\n        // If no button had been pressed previously\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$savedWorkingNumber = 0;\n            $c1ce9d969bfa6909$var$previousEnteredNumber = 0;\n            $c1ce9d969bfa6909$var$workingNumberString = \"\";\n            $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n            $c1ce9d969bfa6909$var$decimalPointActivated = false;\n            $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$multiplication;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage) {\n            if (!$c1ce9d969bfa6909$var$operationInMemory) {\n                $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$decimalPointActivated = false;\n                $c1ce9d969bfa6909$var$workingNumberString = \"\";\n                $c1ce9d969bfa6909$var$workingNumberStringDigitCounter = 0;\n                $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$multiplication;\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n            } else {\n                $c1ce9d969bfa6909$var$performOperationInMemory($c1ce9d969bfa6909$var$operationInMemory);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$operation;\n                $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$multiplication;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) $c1ce9d969bfa6909$var$operationInMemory = $c1ce9d969bfa6909$var$multiplication;\n    }\n    /////////////////////////////// Operations Ends /////////////////////////////////\n    // If pressed button is pos-neg button\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$posNeg}`)) {\n        $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n            opr.style.backgroundColor = null;\n            opr.style.borderColor = null;\n        });\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$updateWorkingNumberString(\"-\", \"0\");\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$posNeg;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint) {\n            $c1ce9d969bfa6909$var$updateWorkingNumberString(String(-1 * Number($c1ce9d969bfa6909$var$workingNumberString)), \".\");\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$posNeg;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation) {\n            $c1ce9d969bfa6909$var$updateWorkingNumberString(\"-\", \"0\");\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$posNeg;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage) {\n            $c1ce9d969bfa6909$var$workingNumberString = String(-1 * Number($c1ce9d969bfa6909$var$workingNumberString));\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$posNeg;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg) {\n            if ($c1ce9d969bfa6909$var$workingNumberString[$c1ce9d969bfa6909$var$workingNumberString.length - 1] === \".\") {\n                $c1ce9d969bfa6909$var$updateWorkingNumberString(String(-1 * Number($c1ce9d969bfa6909$var$workingNumberString)), \".\");\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$posNeg;\n            } else {\n                $c1ce9d969bfa6909$var$updateWorkingNumberString(String(-1 * Number($c1ce9d969bfa6909$var$workingNumberString)), \"\");\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$posNeg;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) {\n            $c1ce9d969bfa6909$var$updateWorkingNumberString(String(-1 * Number($c1ce9d969bfa6909$var$savedWorkingNumber)), \"\");\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$posNeg;\n        }\n    }\n    // If pressed button is inverse button\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$inverse}`)) {\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined) {\n            $c1ce9d969bfa6909$var$savedWorkingNumber = 0;\n            $c1ce9d969bfa6909$var$previousEnteredNumber = 0;\n            $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$inverse;\n            $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation) {\n            if ($c1ce9d969bfa6909$var$savedWorkingNumber === 0) {\n                $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$inverse;\n                $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n            // previousEnteredNumber = 0;\n            } else {\n                $c1ce9d969bfa6909$var$workingNumberString = String(1 / $c1ce9d969bfa6909$var$savedWorkingNumber);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$inverse;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage) {\n            if (Number($c1ce9d969bfa6909$var$workingNumberString) === 0) {\n                $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$inverse;\n                $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n            // previousEnteredNumber = 0;\n            } else {\n                $c1ce9d969bfa6909$var$workingNumberString = String(1 / Number($c1ce9d969bfa6909$var$workingNumberString));\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$inverse;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) {\n            $c1ce9d969bfa6909$var$workingNumberString = String(1 / Number($c1ce9d969bfa6909$var$savedWorkingNumber));\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$inverse;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n            $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$inverse;\n        }\n        $c1ce9d969bfa6909$var$decimalPointActivated = false;\n    }\n    // If pressed button is square root button\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$squareRoot}`)) {\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$squareRoot;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage) {\n            if (Number($c1ce9d969bfa6909$var$workingNumberString) < 0) {\n                $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$squareRoot;\n                $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n            } else {\n                $c1ce9d969bfa6909$var$workingNumberString = String(Math.sqrt(Number($c1ce9d969bfa6909$var$workingNumberString)));\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$squareRoot;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation) {\n            if ($c1ce9d969bfa6909$var$savedWorkingNumber < 0) {\n                $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$squareRoot;\n                $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n                $c1ce9d969bfa6909$var$previousEnteredNumber = $c1ce9d969bfa6909$var$savedWorkingNumber;\n            } else {\n                $c1ce9d969bfa6909$var$workingNumberString = String(1 / $c1ce9d969bfa6909$var$savedWorkingNumber);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$squareRoot;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) {\n            $c1ce9d969bfa6909$var$workingNumberString = String(Math.sqrt(Number($c1ce9d969bfa6909$var$savedWorkingNumber)));\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$squareRoot;\n        }\n        $c1ce9d969bfa6909$var$decimalPointActivated = false;\n    }\n    // If pressed button is percentage\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$percentage}`)) {\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$percentage;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg) {\n            $c1ce9d969bfa6909$var$workingNumberString = String(Number($c1ce9d969bfa6909$var$workingNumberString) / 100);\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$percentage;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation) {\n            if ($c1ce9d969bfa6909$var$savedWorkingNumber === Infinity) {\n                $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n                $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$percentage;\n            } else {\n                $c1ce9d969bfa6909$var$workingNumberString = String(Number($c1ce9d969bfa6909$var$savedWorkingNumber) / 100);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$percentage;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot) {\n            if (Number($c1ce9d969bfa6909$var$workingNumberString) === 0) {\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$percentage;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            } else {\n                $c1ce9d969bfa6909$var$workingNumberString = String(Number($c1ce9d969bfa6909$var$savedWorkingNumber) / 100);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$percentage;\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage) {\n            if ($c1ce9d969bfa6909$var$savedWorkingNumber === Infinity) {\n                $c1ce9d969bfa6909$var$renderScreen(\"Error\");\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$percentage;\n                $c1ce9d969bfa6909$var$workingNumberString = \"0\";\n            } else {\n                $c1ce9d969bfa6909$var$workingNumberString = String(Number($c1ce9d969bfa6909$var$savedWorkingNumber) / 100);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$percentage;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) {\n            $c1ce9d969bfa6909$var$workingNumberString = String(Number($c1ce9d969bfa6909$var$savedWorkingNumber) / 100);\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$percentage;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$workingNumberString);\n        }\n        $c1ce9d969bfa6909$var$decimalPointActivated = false;\n    }\n    // If pressed button is equals to\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$equalsTo}`)) {\n        $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n            opr.style.backgroundColor = null;\n            opr.style.borderColor = null;\n        });\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined) {\n            $c1ce9d969bfa6909$var$savedWorkingNumber = 0;\n            $c1ce9d969bfa6909$var$previousEnteredNumber = 0;\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$equalsTo;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage) {\n            if (!$c1ce9d969bfa6909$var$operationInMemory) {\n                $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$previousEnteredNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$equalsTo;\n            } else {\n                $c1ce9d969bfa6909$var$performOperationInMemory($c1ce9d969bfa6909$var$operationInMemory);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$equalsTo;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation) {\n            $c1ce9d969bfa6909$var$previousEnteredNumber = $c1ce9d969bfa6909$var$savedWorkingNumber;\n            $c1ce9d969bfa6909$var$performOperationInMemoryEqualsTo($c1ce9d969bfa6909$var$operationInMemory);\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$equalsTo;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg) {\n            if ($c1ce9d969bfa6909$var$operationInMemory) {\n                $c1ce9d969bfa6909$var$performOperationInMemoryPosNegEqualsTo($c1ce9d969bfa6909$var$operationInMemory);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$equalsTo;\n            } else {\n                $c1ce9d969bfa6909$var$savedWorkingNumber = Number($c1ce9d969bfa6909$var$workingNumberString);\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$equalsTo;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) {\n            if ($c1ce9d969bfa6909$var$operationInMemory) {\n                $c1ce9d969bfa6909$var$performOperationInMemoryEqualsTo($c1ce9d969bfa6909$var$operationInMemory);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$equalsTo;\n            } else {\n                $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n                $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$equalsTo;\n            }\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$previousEnteredNumber = 0;\n            $c1ce9d969bfa6909$var$renderScreen($c1ce9d969bfa6909$var$savedWorkingNumber);\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$equalsTo;\n        }\n        $c1ce9d969bfa6909$var$decimalPointActivated = false;\n    }\n    // If pressed button is clear button\n    if ($c1ce9d969bfa6909$var$pressedButton.classList.contains(`${$c1ce9d969bfa6909$var$clear}`)) {\n        if ($c1ce9d969bfa6909$var$previousButtonPressed === undefined) return;\n        else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$equalsTo) {\n            $c1ce9d969bfa6909$var$buttonClear.textContent = \"CE\";\n            $c1ce9d969bfa6909$var$workingNumberString = \"\";\n            $c1ce9d969bfa6909$var$renderScreen(\"0\");\n            if ($c1ce9d969bfa6909$var$operationInMemory && ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$operation || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$decimalPoint || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$number || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$inverse || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$squareRoot || $c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$percentage)) {\n                $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n                    opr.style.backgroundColor = null;\n                    opr.style.borderColor = null;\n                });\n                document.querySelector(`.${$c1ce9d969bfa6909$var$operationInMemory}`).style.backgroundColor = $c1ce9d969bfa6909$var$selectedBackgroundColor;\n                document.querySelector(`.${$c1ce9d969bfa6909$var$operationInMemory}`).style.borderColor = $c1ce9d969bfa6909$var$selectedBorderColor;\n            }\n            if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$posNeg) {\n                document.querySelector(\".pos-neg\").style.backgroundColor = $c1ce9d969bfa6909$var$selectedBackgroundColor;\n                document.querySelector(\".pos-neg\").style.borderColor = $c1ce9d969bfa6909$var$selectedBorderColor;\n            }\n            if ($c1ce9d969bfa6909$var$savedWorkingNumber === undefined) $c1ce9d969bfa6909$var$savedWorkingNumber = 0;\n            $c1ce9d969bfa6909$var$decimalPointActivated = false;\n            $c1ce9d969bfa6909$var$previousButtonPressed = $c1ce9d969bfa6909$var$clear;\n        } else if ($c1ce9d969bfa6909$var$previousButtonPressed === $c1ce9d969bfa6909$var$clear) {\n            $c1ce9d969bfa6909$var$previousButtonPressed = undefined;\n            $c1ce9d969bfa6909$var$workingNumberString = \"\";\n            $c1ce9d969bfa6909$var$workingNumberString = 0;\n            $c1ce9d969bfa6909$var$savedWorkingNumber = undefined;\n            $c1ce9d969bfa6909$var$previousEnteredNumber = undefined;\n            $c1ce9d969bfa6909$var$decimalPointActivated = false;\n            $c1ce9d969bfa6909$var$operationInMemory = undefined;\n            $c1ce9d969bfa6909$var$operationButtons.forEach((opr)=>{\n                opr.style.backgroundColor = null;\n                opr.style.borderColor = null;\n            });\n            document.querySelector(\".pos-neg\").style.backgroundColor = null;\n            document.querySelector(\".pos-neg\").style.borderColor = null;\n        }\n    }\n};\n$c1ce9d969bfa6909$var$buttonsArea.addEventListener(\"click\", $c1ce9d969bfa6909$var$calculator);\n\n\n//# sourceMappingURL=index.20b23bc9.js.map\n","\"use strict\";\n\nconst calculatorEl = document.querySelector(\".calculator\");\nconst screen = document.querySelector(\".screen\");\nconst buttonsArea = document.querySelector(\".buttons\");\nconst buttonClear = document.querySelector(\".button-clear\");\nconst selectedBackgroundColor = \"#fee48f\";\nconst selectedBorderColor = \"#b18907\";\nconst additionButton = document.querySelector(\".addition\");\nconst subtractionButton = document.querySelector(\".subtraction\");\nconst divisionButton = document.querySelector(\".division\");\nconst multiplicationButton = document.querySelector(\".multiplication\");\n\nconst operationButtons = [\n  additionButton,\n  subtractionButton,\n  divisionButton,\n  multiplicationButton,\n];\n\n// prettier-ignore\nconst [number, decimalPoint, operation, posNeg, inverse, squareRoot, percentage, equalsTo, clear,] = [\"number\", \"decimal-point\", \"operation\", \"pos-neg\", \"inverse\", \"square-root\", \"percentage\", \"equals-to\", \"clear\"];\n\n// prettier-ignore\nconst [addition, subtraction, division, multiplication] = [\"addition\", \"subtraction\", \"division\", \"multiplication\"];\n\nlet pressedButton;\nlet workingNumberString = \"\"; // To be updated when the user is done entering the number\nlet workingNumberStringDigitCounter = 0; // To make sure that the entered number has no greater than 9 digits in total\nlet decimalPointActivated = false; // To be updated when decimal point has been input\nlet savedWorkingNumber; // Number to be updated as one of the 4 main operations is pressed\nlet previousEnteredNumber; // Last number to be entered\nlet previousButtonPressed; // Last button to be pressed, either operation or number\nlet operationInMemory; // Last operation button pressed, either addition, subtraction, division or multiplication\n\nconst resizeCalculator = function () {\n  const windowAspectRatio = window.innerWidth / window.innerHeight;\n\n  if (windowAspectRatio > 5 / 6) {\n    calculatorEl.style.height = \"95%\";\n    calculatorEl.style.width = \"\";\n  } else {\n    calculatorEl.style.height = \"\";\n    calculatorEl.style.width = \"min(100%, 50rem)\";\n  }\n};\n\n// Event listener to check for width of calculator when DOM loads and when window is resized\nwindow.document.addEventListener(\"DOMContentLoaded\", resizeCalculator);\nwindow.addEventListener(\"resize\", resizeCalculator);\n\n// Function to update working number string by adding characters to it\nconst updateWorkingNumberString = function (rootString, adder) {\n  workingNumberString = rootString + adder;\n};\n\n// Function to update the number string digit counter\nconst updateWorkingNumberStringDigitCounter = function () {\n  workingNumberStringDigitCounter++;\n};\n\nconst renderScreen = function (value) {\n  if (value === \"Error\") {\n    screen.textContent = value;\n  } else {\n    let valueNumber = Number(value);\n    let valueString = String(value);\n    const numberSign = Math.sign(valueNumber);\n\n    if (valueString.includes(\"e\")) {\n      let [num, ePart] = valueString.split(\"e\");\n      const numAbs = Math.abs(Number(num));\n\n      if (String(numAbs).length <= 10) {\n        screen.textContent = `${\n          numberSign === -1 || numberSign === -0 ? \"-\" : \"\"\n        }${numAbs}e${ePart}`;\n      } else {\n        screen.textContent = `${\n          numberSign === -1 || numberSign === -0 ? \"-\" : \"\"\n        }${numAbs.toFixed(8)}e${ePart}`;\n      }\n    } else {\n      if (\n        (valueString.includes(\"-\") &&\n          valueString.includes(\".\") &&\n          valueString.length <= 11) ||\n        (valueString.includes(\"-\") &&\n          !valueString.includes(\".\") &&\n          valueString.length <= 10) ||\n        (!valueString.includes(\"-\") &&\n          valueString.includes(\".\") &&\n          valueString.length <= 10) ||\n        (!valueString.includes(\"-\") &&\n          !valueString.includes(\".\") &&\n          valueString.length <= 9)\n      ) {\n        screen.textContent = valueString;\n      } else {\n        let numAbs = Math.abs(valueNumber);\n        let i = 0;\n        while (numAbs >= 10) {\n          numAbs = numAbs / 10;\n          i++;\n        }\n\n        if (String(numAbs).length <= 10) {\n          screen.textContent = `${\n            numberSign === -1 || numberSign === -0 ? \"-\" : \"\"\n          }${numAbs}e+${i}`;\n        } else {\n          screen.textContent = `${\n            numberSign === -1 || numberSign === -0 ? \"-\" : \"\"\n          }${numAbs.toFixed(8)}e+${i}`;\n        }\n      }\n    }\n  }\n};\n\n// Function combining updateWorkingNumberString and updateWorkingNumberStringDigitCounter\nconst numberPressed = function (rootString, adder) {\n  updateWorkingNumberString(rootString, adder);\n  updateWorkingNumberStringDigitCounter();\n};\n\nconst performOperationInMemory = function (opInMemory) {\n  if (opInMemory === addition) {\n    savedWorkingNumber += Number(workingNumberString);\n    previousEnteredNumber = Number(workingNumberString);\n    workingNumberStringDigitCounter = 0;\n    decimalPointActivated = false;\n  }\n\n  if (opInMemory === subtraction) {\n    savedWorkingNumber -= Number(workingNumberString);\n    previousEnteredNumber = Number(workingNumberString);\n    workingNumberStringDigitCounter = 0;\n    decimalPointActivated = false;\n  }\n\n  if (opInMemory === division) {\n    savedWorkingNumber = savedWorkingNumber / Number(workingNumberString);\n    previousEnteredNumber = Number(workingNumberString);\n    workingNumberStringDigitCounter = 0;\n    decimalPointActivated = false;\n  }\n\n  if (opInMemory === multiplication) {\n    savedWorkingNumber = savedWorkingNumber * Number(workingNumberString);\n    previousEnteredNumber = Number(workingNumberString);\n    workingNumberStringDigitCounter = 0;\n    decimalPointActivated = false;\n  }\n\n  // Check if multiplying by Infinity or NaN\n  if (savedWorkingNumber === NaN || savedWorkingNumber === Infinity) {\n    renderScreen(\"Error\");\n  } else {\n    renderScreen(savedWorkingNumber);\n  }\n};\n\nconst performOperationInMemoryPosNegEqualsTo = function (opInMemory) {\n  if (opInMemory === addition) {\n    savedWorkingNumber = Number(workingNumberString) + previousEnteredNumber;\n  }\n\n  if (opInMemory === subtraction) {\n    savedWorkingNumber = Number(workingNumberString) - previousEnteredNumber;\n  }\n\n  if (opInMemory === division) {\n    savedWorkingNumber = Number(workingNumberString) / previousEnteredNumber;\n  }\n\n  if (opInMemory === multiplication) {\n    savedWorkingNumber = Number(workingNumberString) * previousEnteredNumber;\n  }\n\n  // Check if multiplying by Infinity or NaN\n  if (savedWorkingNumber === NaN || savedWorkingNumber === Infinity) {\n    renderScreen(\"Error\");\n  } else {\n    renderScreen(savedWorkingNumber);\n  }\n};\n\nconst performOperationInMemoryEqualsTo = function (opInMemory) {\n  if (opInMemory === addition) {\n    savedWorkingNumber = savedWorkingNumber + previousEnteredNumber;\n  }\n\n  if (opInMemory === subtraction) {\n    savedWorkingNumber = savedWorkingNumber - previousEnteredNumber;\n  }\n\n  if (opInMemory === division) {\n    savedWorkingNumber = savedWorkingNumber / previousEnteredNumber;\n  }\n\n  if (opInMemory === multiplication) {\n    savedWorkingNumber = savedWorkingNumber * previousEnteredNumber;\n  }\n\n  // Check if multiplying by Infinity or NaN\n  if (savedWorkingNumber === NaN || savedWorkingNumber === Infinity) {\n    renderScreen(\"Error\");\n  } else {\n    renderScreen(savedWorkingNumber);\n  }\n};\n\nconst calculator = function (e) {\n  pressedButton = e.target; // Registering the pressed button\n\n  // If current pressed button is a number\n  if (pressedButton.classList.contains(`${number}`)) {\n    buttonClear.textContent = \"C\";\n\n    operationButtons.forEach((opr) => {\n      opr.style.backgroundColor = null;\n      opr.style.borderColor = null;\n    });\n\n    // If no previous button has been pressed or the previous button pressed was an operation button\n    if (\n      previousButtonPressed === undefined ||\n      previousButtonPressed === operation ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === percentage ||\n      previousButtonPressed === equalsTo ||\n      previousButtonPressed === clear\n    ) {\n      updateWorkingNumberString(\"\", pressedButton.dataset.number);\n      renderScreen(workingNumberString);\n\n      if (pressedButton.dataset.number !== \"0\") {\n        updateWorkingNumberStringDigitCounter();\n      }\n\n      previousButtonPressed = number;\n    }\n    // If previous button pressed was a number\n    else if (previousButtonPressed === number) {\n      // If working number string is just 0 and pressed number is 0\n      if (\n        pressedButton.dataset.number === \"0\" &&\n        workingNumberString.length === 1 &&\n        workingNumberString.includes(\"0\")\n      ) {\n        previousButtonPressed = number;\n        renderScreen(workingNumberString);\n      }\n      // If working number string is just 0 but pressed number is not 0\n      else if (\n        workingNumberString.length === 1 &&\n        workingNumberString.includes(\"0\") &&\n        pressedButton.dataset.number !== \"0\"\n      ) {\n        numberPressed(\"\", pressedButton.dataset.number);\n        renderScreen(workingNumberString);\n\n        previousButtonPressed = number;\n      }\n      // If working number string is a single digit but not 0\n      else if (\n        workingNumberString.length === 1 &&\n        !workingNumberString.includes(\"0\")\n      ) {\n        numberPressed(workingNumberString, pressedButton.dataset.number);\n        renderScreen(workingNumberString);\n\n        previousButtonPressed = number;\n      }\n      // If number of digits on working number string is less than 9\n      else if (workingNumberStringDigitCounter < 9) {\n        numberPressed(workingNumberString, pressedButton.dataset.number);\n        renderScreen(workingNumberString);\n\n        previousButtonPressed = number;\n      } else {\n        return;\n      }\n    }\n    // If previous button pressed was the decimal point\n    else if (previousButtonPressed === decimalPoint) {\n      if (workingNumberStringDigitCounter < 9) {\n        numberPressed(workingNumberString, pressedButton.dataset.number);\n        renderScreen(workingNumberString);\n\n        previousButtonPressed = number;\n      } else {\n        return;\n      }\n    }\n    // If previous button pressed was the pos-neg button\n    else if (previousButtonPressed === posNeg) {\n      if (\n        Number(workingNumberString) === 0 &&\n        pressedButton.dataset.number !== \"0\"\n      ) {\n        updateWorkingNumberString(\"-\", pressedButton.dataset.number);\n        renderScreen(workingNumberString);\n        previousButtonPressed = number;\n        workingNumberStringDigitCounter = 1;\n      } else if (workingNumberStringDigitCounter < 9) {\n        updateWorkingNumberString(\n          workingNumberString,\n          pressedButton.dataset.number\n        );\n        workingNumberStringDigitCounter++;\n        previousButtonPressed = number;\n        renderScreen(workingNumberString);\n      } else {\n        return;\n      }\n    }\n  }\n\n  // If pressed button is the decimal point\n  if (pressedButton.classList.contains(`${decimalPoint}`)) {\n    buttonClear.textContent = \"C\";\n\n    operationButtons.forEach((opr) => {\n      opr.style.backgroundColor = null;\n      opr.style.borderColor = null;\n    });\n\n    if (!decimalPointActivated) {\n      if (\n        previousButtonPressed === undefined ||\n        previousButtonPressed === operation ||\n        previousButtonPressed === inverse ||\n        previousButtonPressed === squareRoot ||\n        previousButtonPressed === percentage ||\n        previousButtonPressed === equalsTo ||\n        previousButtonPressed === clear\n      ) {\n        updateWorkingNumberString(\"0\", \".\");\n        workingNumberStringDigitCounter = 1;\n        previousButtonPressed = decimalPoint;\n        decimalPointActivated = true;\n        renderScreen(workingNumberString);\n      } else if (\n        previousButtonPressed === number &&\n        workingNumberStringDigitCounter < 9\n      ) {\n        updateWorkingNumberString(workingNumberString, \".\");\n        if (Number(workingNumberString) === 0) {\n          updateWorkingNumberStringDigitCounter();\n        }\n        previousButtonPressed = decimalPoint;\n        decimalPointActivated = true;\n        renderScreen(workingNumberString);\n      } else if (previousButtonPressed === posNeg) {\n        updateWorkingNumberString(workingNumberString, \".\");\n        previousButtonPressed = decimalPoint;\n        decimalPointActivated = true;\n        renderScreen(workingNumberString);\n      }\n    } else {\n      return;\n    }\n  }\n\n  /////////////////////////////// Operations Starts /////////////////////////////////\n\n  // If pressed button is addition button\n  if (pressedButton.classList.contains(`${addition}`)) {\n    operationButtons.forEach((opr) => {\n      opr.style.backgroundColor = null;\n      opr.style.borderColor = null;\n    });\n    additionButton.style.backgroundColor = selectedBackgroundColor;\n    additionButton.style.borderColor = selectedBorderColor;\n\n    // If no button had been pressed previously\n    if (\n      previousButtonPressed === undefined ||\n      previousButtonPressed === clear\n    ) {\n      savedWorkingNumber = 0;\n      previousEnteredNumber = 0;\n      workingNumberString = \"\";\n      workingNumberStringDigitCounter = 0;\n      previousButtonPressed = operation;\n      decimalPointActivated = false;\n      operationInMemory = addition;\n      renderScreen(savedWorkingNumber);\n    }\n    // If previous button pressed was a number\n    else if (\n      previousButtonPressed === number ||\n      previousButtonPressed === decimalPoint ||\n      previousButtonPressed === posNeg ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === percentage\n    ) {\n      if (!operationInMemory) {\n        savedWorkingNumber = Number(workingNumberString);\n        previousEnteredNumber = Number(workingNumberString);\n        decimalPointActivated = false;\n        workingNumberString = \"\";\n        workingNumberStringDigitCounter = 0;\n        operationInMemory = addition;\n        previousButtonPressed = operation;\n        renderScreen(savedWorkingNumber);\n      } else {\n        performOperationInMemory(operationInMemory);\n        previousButtonPressed = operation;\n        operationInMemory = addition;\n      }\n    }\n    // If previous button pressed was another operation button\n    else if (\n      previousButtonPressed === operation ||\n      previousButtonPressed === equalsTo\n    ) {\n      operationInMemory = addition;\n    }\n  }\n\n  // If pressed button is subtraction button\n  if (pressedButton.classList.contains(`${subtraction}`)) {\n    operationButtons.forEach((opr) => {\n      opr.style.backgroundColor = null;\n      opr.style.borderColor = null;\n    });\n    subtractionButton.style.backgroundColor = selectedBackgroundColor;\n    subtractionButton.style.borderColor = selectedBorderColor;\n\n    // If no button had been pressed previously\n    if (\n      previousButtonPressed === undefined ||\n      previousButtonPressed === clear\n    ) {\n      savedWorkingNumber = 0;\n      previousEnteredNumber = 0;\n      workingNumberString = \"\";\n      workingNumberStringDigitCounter = 0;\n      previousButtonPressed = operation;\n      decimalPointActivated = false;\n      operationInMemory = subtraction;\n      renderScreen(savedWorkingNumber);\n    }\n    // If previous button pressed was a number\n    else if (\n      previousButtonPressed === number ||\n      previousButtonPressed === decimalPoint ||\n      previousButtonPressed === posNeg ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === percentage\n    ) {\n      if (!operationInMemory) {\n        savedWorkingNumber = Number(workingNumberString);\n        previousEnteredNumber = Number(workingNumberString);\n        decimalPointActivated = false;\n        workingNumberString = \"\";\n        workingNumberStringDigitCounter = 0;\n        operationInMemory = subtraction;\n        previousButtonPressed = operation;\n        renderScreen(savedWorkingNumber);\n      } else {\n        performOperationInMemory(operationInMemory);\n        previousButtonPressed = operation;\n        operationInMemory = subtraction;\n      }\n    }\n    // If previous button pressed was another operation button\n    else if (\n      previousButtonPressed === operation ||\n      previousButtonPressed === equalsTo\n    ) {\n      operationInMemory = subtraction;\n    }\n  }\n\n  // If pressed button is division button\n  if (pressedButton.classList.contains(`${division}`)) {\n    operationButtons.forEach((opr) => {\n      opr.style.backgroundColor = null;\n      opr.style.borderColor = null;\n    });\n    divisionButton.style.backgroundColor = selectedBackgroundColor;\n    divisionButton.style.borderColor = selectedBorderColor;\n\n    // If no button had been pressed previously\n    if (\n      previousButtonPressed === undefined ||\n      previousButtonPressed === clear\n    ) {\n      savedWorkingNumber = 0;\n      previousEnteredNumber = 0;\n      workingNumberString = \"\";\n      workingNumberStringDigitCounter = 0;\n      previousButtonPressed = operation;\n      decimalPointActivated = false;\n      operationInMemory = division;\n      renderScreen(savedWorkingNumber);\n    }\n    // If previous button pressed was a number\n    else if (\n      previousButtonPressed === number ||\n      previousButtonPressed === decimalPoint ||\n      previousButtonPressed === posNeg ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === percentage\n    ) {\n      if (!operationInMemory) {\n        savedWorkingNumber = Number(workingNumberString);\n        previousEnteredNumber = Number(workingNumberString);\n        decimalPointActivated = false;\n        workingNumberString = \"\";\n        workingNumberStringDigitCounter = 0;\n        operationInMemory = division;\n        previousButtonPressed = operation;\n        renderScreen(savedWorkingNumber);\n      } else {\n        performOperationInMemory(operationInMemory);\n        previousButtonPressed = operation;\n        operationInMemory = division;\n      }\n    }\n    // If previous button pressed was another operation button\n    else if (\n      previousButtonPressed === operation ||\n      previousButtonPressed === equalsTo\n    ) {\n      operationInMemory = division;\n    }\n  }\n\n  // If pressed button is multiplication button\n  if (pressedButton.classList.contains(`${multiplication}`)) {\n    operationButtons.forEach((opr) => {\n      opr.style.backgroundColor = null;\n      opr.style.borderColor = null;\n    });\n    multiplicationButton.style.backgroundColor = selectedBackgroundColor;\n    multiplicationButton.style.borderColor = selectedBorderColor;\n\n    // If no button had been pressed previously\n    if (\n      previousButtonPressed === undefined ||\n      previousButtonPressed === clear\n    ) {\n      savedWorkingNumber = 0;\n      previousEnteredNumber = 0;\n      workingNumberString = \"\";\n      workingNumberStringDigitCounter = 0;\n      previousButtonPressed = operation;\n      decimalPointActivated = false;\n      operationInMemory = multiplication;\n      renderScreen(savedWorkingNumber);\n    }\n    // If previous button pressed was a number\n    else if (\n      previousButtonPressed === number ||\n      previousButtonPressed === decimalPoint ||\n      previousButtonPressed === posNeg ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === percentage\n    ) {\n      if (!operationInMemory) {\n        savedWorkingNumber = Number(workingNumberString);\n        previousEnteredNumber = Number(workingNumberString);\n        decimalPointActivated = false;\n        workingNumberString = \"\";\n        workingNumberStringDigitCounter = 0;\n        operationInMemory = multiplication;\n        previousButtonPressed = operation;\n        renderScreen(savedWorkingNumber);\n      } else {\n        performOperationInMemory(operationInMemory);\n        previousButtonPressed = operation;\n        operationInMemory = multiplication;\n      }\n    }\n    // If previous button pressed was another operation button\n    else if (\n      previousButtonPressed === operation ||\n      previousButtonPressed === equalsTo\n    ) {\n      operationInMemory = multiplication;\n    }\n  }\n\n  /////////////////////////////// Operations Ends /////////////////////////////////\n\n  // If pressed button is pos-neg button\n  if (pressedButton.classList.contains(`${posNeg}`)) {\n    operationButtons.forEach((opr) => {\n      opr.style.backgroundColor = null;\n      opr.style.borderColor = null;\n    });\n\n    if (\n      previousButtonPressed === undefined ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === clear\n    ) {\n      updateWorkingNumberString(\"-\", \"0\");\n      previousButtonPressed = posNeg;\n      renderScreen(workingNumberString);\n    } else if (previousButtonPressed === decimalPoint) {\n      updateWorkingNumberString(String(-1 * Number(workingNumberString)), \".\");\n      previousButtonPressed = posNeg;\n      renderScreen(workingNumberString);\n    } else if (previousButtonPressed === operation) {\n      updateWorkingNumberString(\"-\", \"0\");\n      previousButtonPressed = posNeg;\n      renderScreen(workingNumberString);\n    } else if (\n      previousButtonPressed === number ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === percentage\n    ) {\n      workingNumberString = String(-1 * Number(workingNumberString));\n      previousButtonPressed = posNeg;\n      renderScreen(workingNumberString);\n    } else if (previousButtonPressed === posNeg) {\n      if (workingNumberString[workingNumberString.length - 1] === \".\") {\n        updateWorkingNumberString(\n          String(-1 * Number(workingNumberString)),\n          \".\"\n        );\n        renderScreen(workingNumberString);\n        previousButtonPressed = posNeg;\n      } else {\n        updateWorkingNumberString(String(-1 * Number(workingNumberString)), \"\");\n        renderScreen(workingNumberString);\n        previousButtonPressed = posNeg;\n      }\n    } else if (previousButtonPressed === equalsTo) {\n      updateWorkingNumberString(String(-1 * Number(savedWorkingNumber)), \"\");\n      renderScreen(workingNumberString);\n      previousButtonPressed = posNeg;\n    }\n  }\n\n  // If pressed button is inverse button\n  if (pressedButton.classList.contains(`${inverse}`)) {\n    if (previousButtonPressed === undefined) {\n      savedWorkingNumber = 0;\n      previousEnteredNumber = 0;\n      renderScreen(\"Error\");\n      previousButtonPressed = inverse;\n      workingNumberString = \"0\";\n    } else if (previousButtonPressed === operation) {\n      if (savedWorkingNumber === 0) {\n        renderScreen(\"Error\");\n        previousButtonPressed = inverse;\n        workingNumberString = \"0\";\n        // previousEnteredNumber = 0;\n      } else {\n        workingNumberString = String(1 / savedWorkingNumber);\n        renderScreen(workingNumberString);\n        previousButtonPressed = inverse;\n      }\n    } else if (\n      previousButtonPressed === number ||\n      previousButtonPressed === posNeg ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === decimalPoint ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === percentage\n    ) {\n      if (Number(workingNumberString) === 0) {\n        renderScreen(\"Error\");\n        previousButtonPressed = inverse;\n        workingNumberString = \"0\";\n        // previousEnteredNumber = 0;\n      } else {\n        workingNumberString = String(1 / Number(workingNumberString));\n        renderScreen(workingNumberString);\n        previousButtonPressed = inverse;\n      }\n    } else if (previousButtonPressed === equalsTo) {\n      workingNumberString = String(1 / Number(savedWorkingNumber));\n      previousButtonPressed = inverse;\n    } else if (previousButtonPressed === clear) {\n      workingNumberString = \"0\";\n      renderScreen(\"Error\");\n      previousButtonPressed = inverse;\n    }\n    decimalPointActivated = false;\n  }\n\n  // If pressed button is square root button\n  if (pressedButton.classList.contains(`${squareRoot}`)) {\n    if (\n      previousButtonPressed === undefined ||\n      previousButtonPressed === clear\n    ) {\n      workingNumberString = \"0\";\n      renderScreen(workingNumberString);\n      previousButtonPressed = squareRoot;\n    } else if (\n      previousButtonPressed === decimalPoint ||\n      previousButtonPressed === number ||\n      previousButtonPressed === posNeg ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === percentage\n    ) {\n      if (Number(workingNumberString) < 0) {\n        previousEnteredNumber = Number(workingNumberString);\n        renderScreen(\"Error\");\n        previousButtonPressed = squareRoot;\n        workingNumberString = \"0\";\n      } else {\n        workingNumberString = String(Math.sqrt(Number(workingNumberString)));\n        renderScreen(workingNumberString);\n        previousButtonPressed = squareRoot;\n      }\n    } else if (previousButtonPressed === operation) {\n      if (savedWorkingNumber < 0) {\n        renderScreen(\"Error\");\n        previousButtonPressed = squareRoot;\n        workingNumberString = \"0\";\n        previousEnteredNumber = savedWorkingNumber;\n      } else {\n        workingNumberString = String(1 / savedWorkingNumber);\n        renderScreen(workingNumberString);\n        previousButtonPressed = squareRoot;\n      }\n    } else if (previousButtonPressed === equalsTo) {\n      workingNumberString = String(Math.sqrt(Number(savedWorkingNumber)));\n      renderScreen(workingNumberString);\n      previousButtonPressed = squareRoot;\n    }\n    decimalPointActivated = false;\n  }\n\n  // If pressed button is percentage\n  if (pressedButton.classList.contains(`${percentage}`)) {\n    if (\n      previousButtonPressed === undefined ||\n      previousButtonPressed === clear\n    ) {\n      workingNumberString = \"0\";\n      renderScreen(workingNumberString);\n      previousButtonPressed = percentage;\n    } else if (\n      previousButtonPressed === decimalPoint ||\n      previousButtonPressed === number ||\n      previousButtonPressed === posNeg\n    ) {\n      workingNumberString = String(Number(workingNumberString) / 100);\n      renderScreen(workingNumberString);\n      previousButtonPressed = percentage;\n    } else if (previousButtonPressed === operation) {\n      if (savedWorkingNumber === NaN || savedWorkingNumber === Infinity) {\n        renderScreen(\"Error\");\n        workingNumberString = \"0\";\n        previousButtonPressed = percentage;\n      } else {\n        workingNumberString = String(Number(savedWorkingNumber) / 100);\n        previousButtonPressed = percentage;\n        renderScreen(workingNumberString);\n      }\n    } else if (\n      previousButtonPressed === inverse ||\n      previousButtonPressed === squareRoot\n    ) {\n      if (Number(workingNumberString) === 0) {\n        previousButtonPressed = percentage;\n        renderScreen(workingNumberString);\n      } else {\n        workingNumberString = String(Number(savedWorkingNumber) / 100);\n        previousButtonPressed = percentage;\n        renderScreen(workingNumberString);\n      }\n    } else if (previousButtonPressed === percentage) {\n      if (savedWorkingNumber === NaN || savedWorkingNumber === Infinity) {\n        renderScreen(\"Error\");\n        previousButtonPressed = percentage;\n        workingNumberString = \"0\";\n      } else {\n        workingNumberString = String(Number(savedWorkingNumber) / 100);\n        renderScreen(workingNumberString);\n        previousButtonPressed = percentage;\n      }\n    } else if (previousButtonPressed === equalsTo) {\n      workingNumberString = String(Number(savedWorkingNumber) / 100);\n      previousButtonPressed = percentage;\n      renderScreen(workingNumberString);\n    }\n    decimalPointActivated = false;\n  }\n\n  // If pressed button is equals to\n  if (pressedButton.classList.contains(`${equalsTo}`)) {\n    operationButtons.forEach((opr) => {\n      opr.style.backgroundColor = null;\n      opr.style.borderColor = null;\n    });\n\n    if (previousButtonPressed === undefined) {\n      savedWorkingNumber = 0;\n      previousEnteredNumber = 0;\n      previousButtonPressed = equalsTo;\n    } else if (\n      previousButtonPressed === decimalPoint ||\n      previousButtonPressed === number ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === percentage\n    ) {\n      if (!operationInMemory) {\n        savedWorkingNumber = Number(workingNumberString);\n        previousEnteredNumber = Number(workingNumberString);\n        renderScreen(savedWorkingNumber);\n        previousButtonPressed = equalsTo;\n      } else {\n        performOperationInMemory(operationInMemory);\n        previousButtonPressed = equalsTo;\n      }\n    } else if (previousButtonPressed === operation) {\n      previousEnteredNumber = savedWorkingNumber;\n      performOperationInMemoryEqualsTo(operationInMemory);\n      previousButtonPressed = equalsTo;\n    } else if (previousButtonPressed === posNeg) {\n      if (operationInMemory) {\n        performOperationInMemoryPosNegEqualsTo(operationInMemory);\n        previousButtonPressed = equalsTo;\n      } else {\n        savedWorkingNumber = Number(workingNumberString);\n        renderScreen(savedWorkingNumber);\n        previousButtonPressed = equalsTo;\n      }\n    } else if (previousButtonPressed === equalsTo) {\n      if (operationInMemory) {\n        performOperationInMemoryEqualsTo(operationInMemory);\n        previousButtonPressed = equalsTo;\n      } else {\n        renderScreen(savedWorkingNumber);\n        previousButtonPressed = equalsTo;\n      }\n    } else if (previousButtonPressed === clear) {\n      previousEnteredNumber = 0;\n      renderScreen(savedWorkingNumber);\n      previousButtonPressed = equalsTo;\n    }\n    decimalPointActivated = false;\n  }\n\n  // If pressed button is clear button\n  if (pressedButton.classList.contains(`${clear}`)) {\n    if (previousButtonPressed === undefined) {\n      return;\n    } else if (\n      previousButtonPressed === operation ||\n      previousButtonPressed === decimalPoint ||\n      previousButtonPressed === number ||\n      previousButtonPressed === posNeg ||\n      previousButtonPressed === inverse ||\n      previousButtonPressed === squareRoot ||\n      previousButtonPressed === percentage ||\n      previousButtonPressed === equalsTo\n    ) {\n      buttonClear.textContent = \"CE\";\n\n      workingNumberString = \"\";\n      renderScreen(\"0\");\n      if (\n        operationInMemory &&\n        (previousButtonPressed === operation ||\n          previousButtonPressed === decimalPoint ||\n          previousButtonPressed === number ||\n          previousButtonPressed === inverse ||\n          previousButtonPressed === squareRoot ||\n          previousButtonPressed === percentage)\n      ) {\n        operationButtons.forEach((opr) => {\n          opr.style.backgroundColor = null;\n          opr.style.borderColor = null;\n        });\n\n        document.querySelector(`.${operationInMemory}`).style.backgroundColor =\n          selectedBackgroundColor;\n        document.querySelector(`.${operationInMemory}`).style.borderColor =\n          selectedBorderColor;\n      }\n\n      if (previousButtonPressed === posNeg) {\n        document.querySelector(\".pos-neg\").style.backgroundColor =\n          selectedBackgroundColor;\n        document.querySelector(\".pos-neg\").style.borderColor =\n          selectedBorderColor;\n      }\n\n      if (savedWorkingNumber === undefined) {\n        savedWorkingNumber = 0;\n      }\n\n      decimalPointActivated = false;\n      previousButtonPressed = clear;\n    } else if (previousButtonPressed === clear) {\n      previousButtonPressed = undefined;\n      workingNumberString = \"\";\n      workingNumberString = 0;\n      savedWorkingNumber = undefined;\n      previousEnteredNumber = undefined;\n      decimalPointActivated = false;\n      operationInMemory = undefined;\n\n      operationButtons.forEach((opr) => {\n        opr.style.backgroundColor = null;\n        opr.style.borderColor = null;\n      });\n\n      document.querySelector(\".pos-neg\").style.backgroundColor = null;\n      document.querySelector(\".pos-neg\").style.borderColor = null;\n    }\n  }\n};\n\nbuttonsArea.addEventListener(\"click\", calculator);\n"],"names":["$c1ce9d969bfa6909$var$pressedButton","$c1ce9d969bfa6909$var$savedWorkingNumber","$c1ce9d969bfa6909$var$previousEnteredNumber","$c1ce9d969bfa6909$var$previousButtonPressed","$c1ce9d969bfa6909$var$operationInMemory","$c1ce9d969bfa6909$var$calculatorEl","document","querySelector","$c1ce9d969bfa6909$var$screen","$c1ce9d969bfa6909$var$buttonsArea","$c1ce9d969bfa6909$var$buttonClear","$c1ce9d969bfa6909$var$selectedBackgroundColor","$c1ce9d969bfa6909$var$selectedBorderColor","$c1ce9d969bfa6909$var$additionButton","$c1ce9d969bfa6909$var$subtractionButton","$c1ce9d969bfa6909$var$divisionButton","$c1ce9d969bfa6909$var$multiplicationButton","$c1ce9d969bfa6909$var$operationButtons","$c1ce9d969bfa6909$var$number","$c1ce9d969bfa6909$var$decimalPoint","$c1ce9d969bfa6909$var$operation","$c1ce9d969bfa6909$var$posNeg","$c1ce9d969bfa6909$var$inverse","$c1ce9d969bfa6909$var$squareRoot","$c1ce9d969bfa6909$var$percentage","$c1ce9d969bfa6909$var$equalsTo","$c1ce9d969bfa6909$var$clear","$c1ce9d969bfa6909$var$addition","$c1ce9d969bfa6909$var$subtraction","$c1ce9d969bfa6909$var$division","$c1ce9d969bfa6909$var$multiplication","$c1ce9d969bfa6909$var$workingNumberString","$c1ce9d969bfa6909$var$workingNumberStringDigitCounter","$c1ce9d969bfa6909$var$decimalPointActivated","$c1ce9d969bfa6909$var$resizeCalculator","windowAspectRatio","window","innerWidth","innerHeight","style","height","width","addEventListener","$c1ce9d969bfa6909$var$updateWorkingNumberString","rootString","adder","$c1ce9d969bfa6909$var$updateWorkingNumberStringDigitCounter","$c1ce9d969bfa6909$var$renderScreen","value","textContent","valueNumber","Number","valueString","String","numberSign","Math","sign","includes","num","ePart","split","numAbs","abs","length","toFixed","i","$c1ce9d969bfa6909$var$numberPressed","$c1ce9d969bfa6909$var$performOperationInMemory","opInMemory","Infinity","$c1ce9d969bfa6909$var$performOperationInMemoryPosNegEqualsTo","$c1ce9d969bfa6909$var$performOperationInMemoryEqualsTo","e","target","classList","contains","forEach","opr","backgroundColor","borderColor","undefined","dataset","number","sqrt"],"version":3,"file":"index.20b23bc9.js.map"}